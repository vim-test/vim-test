*test.txt*  A test wrapper which enables you to run tests at speed of thought

Author: Janko MarohniÄ‡ <https://github.com/janko-m>
License: Same terms as Vim itself (see |license|)

|test|                            INTRODUCTION
|test-generic_commands|           GENERIC COMMANDS
|test-strategies|                 STRATEGIES
|test-quickfix-strategies|        QUICKFIX STRATEGIES
|test-custom-strategies|          CUSTOM STRATEGIES
|test-configuration|              CONFIGURATION
|test-projectionist|              PROJECTIONIST INTEGRATION
|test-about|                      ABOUT
|test-credits|                    CREDITS


INTRODUCTION                                    *test*

This plugin allows you to:

  * run nearest test (to the cursor)
  * run (current) test file
  * run test suite
  * run last test

It comes with most common test runners already built in, so it knows which
test runner it has to use for the file you're looking at.

Add your preferred mappings to your `.vimrc` file:
>
  nmap <silent> <leader>t :TestNearest<CR>
  nmap <silent> <leader>T :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>
<

GENERIC COMMANDS                                *test-generic_commands*

In all commands [args] are forwarded to the underlying test runner.

                                                *test-:TestNearest*
:TestNearest [args]          Run a test nearest to the cursor (some test
                             runners may not support this). If the current
                             file is not a test file, it reruns a previous
                             "nearest test" (if present).

                                                *test-:TestFile*
:TestFile [args]             Run tests for the current file. If the current
                             file is not a test file, it runs tests for a
                             previously "touched" test file (if present).

                                                *test-:TestSuite*
:TestSuite [args]            Run test suite of the current file. If the current
                             file is not a test file, it runs the suite for
                             the last "touched" test file (if present).

                                                *test-:TestLast*
:TestLast                    Run the last test.

                                                *test-:TestVisit*
:TestVisit                   Open the last run test in the current buffer.

RUNNER COMMANDS                                 *test-runner_commands*

In all commands [args] are forwarded to the underlying test runner.

                                                *test-:RSpec*
:RSpec [args]                Uses the `rspec` command.

                                                *test-:Cucumber*
:Cucumber [args]             Uses the `cucumber` command.

                                                *test-:CucumberJS*
:CucumberJS [args]           Uses the `cucumber-js` command.

                                                *test-:Minitest*
:Minitest [args]             Uses the `rake` `test` or `ruby` `-I` `test` command.
                             It properly translates CLI options:
>
                             :Minitest --seed 1234
                             => rake test TEST="test/**/*_test.rb" TESTOPTS='--seed=1234'
<
                                                *test-:Rails*
:Rails [args]                Uses the `rails` `test` command.

                                                *test-:M*
:M [args]                    Uses the `m` command.

                                                *test-:Ava*
:Ava [args]                  Uses the `ava` command.

                                                *test-:DenoTest*
:DenoTest [args]             Uses the `deno test` command.

                                                *test-:Intern*
:Intern [args]               Uses the `intern-client` or `intern-runner` command.

                                                *test-:TAP*
:TAP [args]                  Uses the `tap` or `tape` command.

                                                *test-:Lab*
:Lab [args]                  Uses the `lab` command.

                                                *test-:Jest*
:Jest [args]                 Uses the `jest` command.

                                                *test-:Playwright*
:Playwright [args]           Uses the `playwright test` command.

                                                *test-:ReactScripts*
:ReactScripts [args]         Uses the `react-scripts test` command.

                                                *test-:Cypress*
:Cypress [args]              Uses the `cypress` command.

                                                *test-:Mocha*
:Mocha [args]                Uses the `mocha` command.

                                                *test-:Jasmine*
:Jasmine [args]              Uses the `jasmine` command.

                                                *test-:Karma*
:Karma [args]                Uses the `karma` command.

                                                *test-:WebdriverIo*
:WebdriverIo [args]          Uses the `wdio` command.

                                                *test-:Nose*
:Nose [args]                 Uses the `nosetests` command.

                                                *test-:Nose2*
:Nose2 [args]                Uses the `nose2` command.

                                                *test-:PyTest*
:PyTest [args]               Uses the `py.test` command.

                                                *test-:DjangoTest*
:DjangoTest [args]           Uses the `django` `test` command.

                                                *test-:Behave*
:Behave [args]               Uses the `behave` `test` command.

                                                *test-:PyUnit*
:PyUnit [args]               Uses the `unittest` `test` command.

                                                *test-:Mamba*
:Mamba [args]                Uses the `mamba` `test` command.

                                                *test-:ElmTest*
:ElmTest [args]              Uses the `elm-test` command.

                                                *test-:ExUnit*
:ExUnit [args]               Uses the `mix` `test` command.

                                                *test-:ESpec*
:ESpec [args]                Uses the `mix` `espec` command.

                                                *test-:CommonTest*
:CommonTest [args]           Uses the `rebar3` `ct` command.

                                                *test-:EUnit*
:EUnit [args]                Uses the `rebar3` `eunit` command.

                                                *test-:PropEr*
:PropEr [args]               Uses the `rebar3` `proper` command.

                                                *test-:Xunit*
:Xunit [args]                Uses the `dotnet` `xunit` command.

                                                *test-:DotnetTest*
:DotnetTest [args]           Uses the `dotnet` `test` command.

                                                *test-:Catch2*
:Catch2 [args]               Uses the compiled executable(user defined) from within the build directory
                                                *test-:GoTest*
:GoTest [args]               Uses the `go` `test` command.

                                                *test-:Ginkgo*
:Ginkgo [args]               Uses the `ginkgo` command.

                                                *test-:RichGo*
:RichGo [args]               Uses the `richgo` `test` command.

                                                *test-:Delve*
:Delve [args]                Uses the `dlv` `test` command.

                                                *test-:CargoTest*
:CargoTest [args]            Uses the `cargo` `test` command.

                                                *test-:FireplaceTest*
:FireplaceTest [args]        Uses `Fireplace.vim` to run test commands, and
                             automatically reloads code.

                             * Without arguments runs all tests.
                             * With argument /foo/ runs all tests matching
                               "foo".
                             * Otherwise accepts a list of filenames (which it
                               translates to namespaces).

                                                *test-:Bats*
:Bats [args]                 Uses the `bats` command.

                                                *test-:ShellSpec*
:ShellSpec [args]                 Uses the `shellspec` command.

                                                *test-:VSpec*
:VSpec [args]                Uses the `vim-flavor` `test` command.

                                                *test-:Vader*
:Vader [args]                Uses the `vader#run()` vim function.

                                                *test-:Themis*
:Themis [args]               Uses the `themis` command.

                                                *test-:Vroom*
:Vroom [args]                Uses the `vroom` command.

                                                *test-:Busted*
:Busted [args]               Uses the `busted` command.

                                                *test-:PHPUnit*
:PHPUnit [args]              Uses the `phpunit` command.

                                                *test-:Pest*
:Pest [args]              Uses the `pest` command.

:Sail [args]              Uses the `sail` command.
                                                *test-:Sail*

                                                *test-:Behat*
:Behat [args]                Uses the `behat` command.

                                                *test-:Dusk*
:Dusk [args]                 Uses the `dusk` command.

                                                *test-:PHPSpec*
:PHPSpec [args]              Uses the `phpspec` command.

                                                *test-:Codeception*
:Codeception [args]          Uses the `codecept` command.

                                                *test-:Peridot*
:Peridot [args]              Uses the `peridot` command.

                                                *test-:Kahlan*
:Kahlan [args]               Uses the `kahlan` command.

                                                *test-:Prove*
:Prove [args]                Uses the `prove` command.

                                                *test-:MavenTest*
:MavenTest [args]            Uses the `mvn` `test` command. If the file exists in a multi-module project then appends -pl <modulename> and runs a single module only. There is a different strategy for running tests with the failsafe plugin instead of surefire. It is described in detail in the test-maven-test-differences section.
                                                *test-:GradleTest*
:GradleTest [args]           Uses the `gradle` `test` command. If the project is multi module then it uses the -p <modulename> flag.

                                                *test-:SbtTest*
:SbtTest [args]            Uses the `sbt` `test/testOnly` command.

                                                *test-:BloopTest*
:BloopTest [args]            Uses the `bloop` `test/test -o` command.

                                                *test-:CrystalSpec*
:CrystalSpec [args]          Uses the `crystal` `spec` command.

                                                *test-:MintTest*
:MintTest [args]             Uses the `mint` `test` command.

                                                *test-:SwiftPM*
:SwiftPM [args]              Uses the `swift test` command.

                                                *test-:StackTest*
:StackTest [args]            Uses the `stack test` command.

                                                *test-:NgTest*
:NgTest [args]  	         Uses the Angular `ng test` command.

                                                *test-:Nx*
:Nx [args]                 Uses the `nx test` command.

                                                *test-:TestBench*
:TestBench [args]  	         Uses the TestBench `bench` command.

                                                *test-:FlutterTest*
:FlutterTest [args]  	         Uses the `flutter` `test` command.

                                                *test-:DartTest*
:DartTest [args]  	         Uses the `dart test` command.

                                                *test-:VueTestUtils*
:VueTestUtils [args]  	         Uses the `vue-cli-service` command.


MAVEN TEST DIFFERENCES                          *test-maven-test-differences*

As there are different approaches to run tests in a maven project (unit vs integration tests) there is a way to run both. Initially the vim-test runs `mvn` `test`. If you want it to run `mvn` `verify` instead, then you can create your own command invoking vim test directly with the 'integration' parameter:
>
  command! -nargs=* -bar IntegrationTest call test#run('integration', split(<q-args>))
<

With this set up you can run your integration tests with the :IntegrationTest command for that single file and module.
As there might be some dependencies between the maven modules you might need to pass in other parameters for the tests just like any other commands in vim-test. Here is a mapping with other optional parameters:

>
  nnoremap <silent><leader>itf :IntegrationTest -Dtest=foo -DfailIfNoTests=false -am -Dpmd.skip=true -Dcheckstyle.skip=true<CR>
<

STRATEGIES                                      *test-strategies*

Multiple strategies are supported for running tests.

AsyncRun ~

Runs test commands asynchronously using new APIs in Vim 8 and NeoVim.
Requires AsyncRun plugin.
>
  let test#strategy = 'asyncrun' or 'asyncrun_background'
<
Basic (default) ~

Runs test commands with `:!`, which switches your Vim to the Terminal.
>
  let test#strategy = 'basic'
<
Make ~

Runs test commands with `:make` or `:make!`. If Dispatch.vim plugin is
available, it will be used to automatically find the correct compiler for the
command.
>
  let test#strategy = 'make' " or 'make_bang'
<
Dispatch ~

Runs test commands with `:Dispatch` or `:Dispatch!`. Requires the Dispatch.vim
plugin.
>
  let test#strategy = 'dispatch' " or 'dispatch_background'
<
VimProc ~

Runs test commands with `:VimProcBang`. Requires the Vimproc.vim plugin.
>
  let test#strategy = 'vimproc'
<
Neovim ~

Runs test commands with `:terminal`, which spawns a terminal inside Neovim.
>
  let test#strategy = 'neovim'
<
Vim8 Terminal ~

Runs test commands with `term_start()`, which spawns a terminal inside Vim.
>
  let test#strategy = 'vimterminal'
<
Neoterm ~

Runs test commands with `:T`. Requires the Neoterm plugin.
>
  let test#strategy = 'neoterm'
<
Floaterm ~

Runs test commands within floating/popup terminal. Requires the vim-floaterm plugin.
>
  let test#strategy = 'floaterm'
<
Neomake ~

Runs test commands with `:NeomakeProject`. Requires the Neomake plugin. If
Dispatch.vim plugin is available, it will be used to automatically find the
correct compiler for the command.
>
  let test#strategy = 'neomake'
<
MakeGreen ~

Runs test commands with `:MakeGreen`. Requires the MakeGreen.vim plugin. If
Dispatch.vim plugin is available, it will be used to automatically find the
correct compiler for the command.
>
  let test#strategy = 'makegreen'
<
Vimux ~

Runs test commands in a small Tmux pane at the bottom of your Terminal.
Requires the Vimux plugin and Tmux.
>
  let test#strategy = 'vimux'
<
Tmuxify ~

Runs test commands in a small Tmux pane at the bottom of your Terminal.
Requires the Tmuxify plugin and Tmux.
>
  let test#strategy = 'tmuxify'
<
Tslime ~

Runs test commands in a Tmux pane you specify. Requires the Tslime.vim plugin
and Tmux.
>
  let test#strategy = 'tslime'
<
Slimux ~

Runs test commands in a Tmux pane you specify. Requires the slimux plugin and
Tmux.
>
  let test#strategy = 'slimux'
<
Vim Tmux Runner ~

Runs test commands in a small Tmux pane. Requires the Vim Timux Runner plugin
and Tmux
>
  let test#strategy = 'vtr'
<
VimShell ~

Runs test commands in a shell written in VimScript. Requires the VimShell
plugin.
>
  let test#strategy = 'vimshell'
<
Terminal.app / iTerm.app ~

If you're in MacVim GUI, you can use this strategy to send the test commands
to your Terminal.app/iTerm.app (since executing shell commands inside Vim GUIs
isn't that nice).
>
  let test#strategy = 'terminal'
  " or
  let test#strategy = 'iterm'
<
Kitty ~

If you want to run commands in a Kitty terminal window you can use this
strategy.

Please make sure:

- you start kitty setting up remote control and specifying a socket for kitty
  to listen to, like this:
>
  $ kitty -o allow_remote_control=yes --listen-on unix:/tmp/mykitty
<
  or via `kitty.conf`:
>
  allow_remote_control yes
  listen_on unix:/tmp/mykitty
<
- you export an environment variable `$KITTY_LISTEN_ON` with the same socket, like:
>
  $ export KITTY_LISTEN_ON=unix:/tmp/mykitty
<
  or if via `kitty.conf` (it appends kitty's PID):
>
  $ export KITTY_LISTEN_ON=unix:/tmp/mykitty-$PPID
<
You can then use this strategy this way:
>
  let test#strategy = 'kitty'
<

Shtuff ~

This strategy lets you run commands in a remote terminal without needing tools
like tmux or special terminals such as Kitty.

Before you can run tests using this strategy, you will need to have a terminal
setup as a receiver, and also you'll need to set `g:shtuff_receiver` in your
vimrc file.

In your terminal of choice:

>
$ shtuff as devrunner
<

And in your vimrc:

>
let g:shtuff_receiver = 'devrunner'
<

asyncrun_background | asyncrun_background_term ~

These are hardcoded solutions and will not be affected by your global `AsyncRun`
settings. If you want to switch between them then change `test#strategy`.

Note: that the base `asyncrun` strategy will be affected by your global asyncrun
settings.

Harpoon ~

This strategy lets you run commands in a neovim terminal using harpoon terminals

Before you can use this strategy you are going to need to have the harpoon plugin installed

By default the commands are sent to the terminal 1, to send the command to another terminal you con set in you vimrc g:test#harpoon_term

For example to send the commands to terminal number 2 you can set in your vimrc:

>
let g:test#harpoon_term = 2
<

By default this strategy will also open the terminal in the current window.  To disable
this behavior set `g:test#harpoon#gototerminal = 0`.

QUICKFIX STRATEGIES                               *test-quickfix-strategies*

If you want your test results to appear in the |quickfix| window, use one of the
following strategies:

  * Make
  * Neomake
  * MakeGreen
  * Dispatch.vim
  * asyncrun_background

Regardless of which you pick, it's recommended you have Dispatch.vim installed as the
strategies will automatically use it to determine the correct |compiler|, ensuring the
test output is correctly parsed for the quickfix window.

As Dispatch.vim just determines the compiler, you need to make sure the Vim distribution
or a plugin has a corresponding compiler for your test runner, or you may need to
|write-compiler-plugin|.

If the test command prefix doesn't match the compiler's |makeprg| then use the
|g:dispatch_compilers| variable. For example if your test command was './vendor/bin/phpunit'
but you wanted to use the phpunit2 compiler:
>
  let g:dispatch_compilers = {}
  let g:dispatch_compilers['./vendor/bin/'] = ''
  let g:dispatch_compilers['phpunit'] = 'phpunit2'
<

CUSTOM STRATEGIES                               *test-custom-strategies*

Strategy is a function which takes a test command and executes it in some way.
If none of the built-in strategies suit your needs, you can define your own:
>
  function! EchoStrategy(cmd)
    echo 'It works! Command for running tests: ' . a:cmd
  endfunction

  let g:test#custom_strategies = {'echo': function('EchoStrategy')}
  let g:test#strategy = 'echo'
<

TRANSFORMATIONS                                 *test-transformations*

You can automatically apply transformations of your test commands by
registering a "transformation" function:
>
  function! VagrantTransform(cmd) abort
    let vagrant_project = get(matchlist(s:cat('Vagrantfile'), '\vconfig\.vm.synced_folder ["''].+[''"], ["''](.+)[''"]'), 1)
    return 'vagrant ssh --command '.shellescape('cd '.vagrant_project.'; '.a:cmd)
  endfunction

  let g:test#custom_transformations = {'vagrant': function('VagrantTransform')}
  let g:test#transformation = 'vagrant'
<

CONFIGURATION                                   *test-configuration*

You can set up strategies per granularity:
>
  let test#strategy = {
    \ 'nearest': 'neovim',
    \ 'file':    'dispatch',
    \ 'suite':   'basic',
  \}
<
of even per command:
>
  :TestFile -strategy=neovim
<
If you want to disable clearing the screen for strategies, you can do
>
  let g:test#preserve_screen = 1
<
By default, vim-test will echo the test command before running it. You can
disable this behavior with
>
  let g:test#echo_command = 0
<
You may find yourself specifying certain options for your test runners in
certain situations. You can configure your preferred options with
>
  let g:test#ruby#minitest#options = '--verbose'
<
Or, if you prefer more granular approach, you can do
>
  let g:test#ruby#rspec#options = {
    \ 'nearest': '--format documentation',
    \ 'file':    '--format documentation',
    \ 'suite':   '--tag ~slow',
  \}
<
You can also specify a global option for the test runner to work alongside the
granular options. Here, all rspec tests will run with the --format documentation
option and any suite granularities will be run with the --tag ~slow option as
well
>
  let g:test#ruby#rspec#options = {
    \ 'all':   '--format documentation',
    \ 'suite': '--tag ~slow',
  \}
<
If you want to manually configure a test runner's executable, you can do
>
  let g:test#ruby#rspec#executable = 'foreman run rspec'
<
You can instruct test.vim to generate absolute file paths:
>
  let test#filename_modifier = ':.' " test/models/user_test.rb (default)
  let test#filename_modifier = ':p' " /User/janko/Code/my_project/test/models/user_test.rb
  let test#filename_modifier = ':~' " ~/Code/my_project/test/models/user_test.rb
<
To select which runners to load, set this option:
>
  let test#enabled_runners = ["mylanguage#myrunner", "ruby#rspec"]
<
All other runners will not be loaded.

Note that for your own custom runners, you still need to set `test#custom_runners`.

Test.vim relies on you being cd-ed into the project root. However, sometimes
you may want to execute tests from a different directory than the current
working directory. You might have a bigger project with many sub-projects,
or you might be using |autochdir|. In any case, you can use a different
working directory for running tests:
>
  let test#project_root = "/path/to/your/project"
<
Both the `neovim` and `Vim8 Terminal` strategy will open a split window on the
bottom by default, but you can configure a different position or orientation.
Whatever you put here is passed to `new` - so, you may also specify size (see
`:help opening-window` or `:help new` for more info):
>
  let test#neovim#term_position = "topleft"
  let test#neovim#term_position = "vert"
  let test#neovim#term_position = "vert botright 30"
<
for neovim and
>
  let test#vim#term_position = "belowright"
<
for vim

By default, the `neovim` and `basic` (when using Neovim) strategies will open a
terminal in insert mode, so that you can press any key to close the split. If
you would prefer to open the terminal in normal mode:
>
  let test#neovim#start_normal = 1 " if using neovim strategy
  let test#basic#start_normal = 1 " if using basic strategy
<


PROJECTIONIST INTEGRATION                       *test-projectionist*

If the |projectionist| plug-in is present, you can run a test command from an
application file, and test.vim will automatically try to run the
command on the "alternate" test file.

You can disable this integration by doing
>
  let g:test#no_alternate = 1
<

CUSTOM ALTERNATE FILE                           *test-custom-alternate-file*

If you are using a different library for jumping between implementation and test file
you can define a custom function that returns the test filename.

>
function! CustomAlternateFile(cmd)
  return "test_file_spec.rb"
endfunction

let g:test#custom_alternate_file = function('echo')
<

ABOUT                                           *test-about*

You can get the latest version, see the changelog, or report a bug on GitHub:

https://github.com/vim-test/vim-test


CREDITS                                         *test-credits*

Thanks to Gary Bernhardt, the person who invented this kind of testing.
I also want to thank vim-rspec (https://github.com/thoughtbot/vim-rspec), from
which I borrowed GUI support for OS X, and Windows support. Also thanks to
vim-vroom (https://github.com/skalnik/vim-vroom).
